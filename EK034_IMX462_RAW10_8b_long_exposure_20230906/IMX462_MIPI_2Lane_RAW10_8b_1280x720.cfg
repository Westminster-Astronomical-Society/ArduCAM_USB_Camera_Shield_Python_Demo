;**************************************************************************************/
; ----- camera parameter -----
;
; -- Keyname description:
; CFG_MODE  = set the config mode for camera: 0 -> User define(UI)
;											  1 -> This config File
; TYPE      = set the name of the camera module
; VID		= set the Vendor ID of camera
; SIZE		= set the width and height of the image generated by camera 
; BIT_WIDTH = set the bit width of the image generated by camera 
; FORMAT    = set the format of the image generated by camera:
;							 | 0 -> RAW	   | 1 -> RGB565  |	2 -> YUV422   | 3 -> JPG  |
;							 | -- 0 -> RG  | -- 0 -> RGB  | -- 0 -> YUYV  |           |
;							 | -- 1 -> GR  | -- 1 -> BGR  | -- 1 -> YVYU  |           |
;							 | -- 2 -> GB  |              | -- 2 -> UYVY  |           |
;							 | -- 3 -> BG  |              | -- 3 -> VYUY  |           |
; I2C_MODE  = set the bit width of the address and data of I2C communication: 
;																							0 ->  8 bit address &  8 bit value				
;																						  	1 ->  8 bit address & 16 bit value
;																							2 -> 16 bit address &  8 bit value
;																							3 -> 16 bit address & 16 bit value		
; I2C_ADDR  = set the ship address for register config of camera 
; 
; -- Keyname format:
; CFG_MODE  	= <value1>							;<comment>
; TYPE      	= <value1>
; VID			= <vid>
; SIZE			= <width>, <height>
; BIT_WIDTH 	= <bitWidth>
; FORMAT    	= <value1>[, <value2>]
; I2C_MODE  	= <value1>
; I2C_ADDR  	= <i2cAddress> 
;
; <valueN>		Index value representing certain meanings 
; <vid>			Vendor ID of the camera
; <width>		Width of the image generated by camera
; <height>		Height of the image generated by camera
; <bitWidth>	Bit width of the image generated by camera
; <i2cAddress>	Ship address for register config of camera
; <comment>    	Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[camera parameter]
CFG_MODE  = 0	
TYPE      = IMX462
SIZE      = 1280, 720
BIT_WIDTH = 8 
FORMAT    = 0, 3
I2C_MODE  = 2					
I2C_ADDR  = 0x34
;TRANS_LVL = 128


[control parameter]
MIN_VALUE   = 42
MAX_VALUE   = 60000
STEP        = 1
DEF 		= 60000
CTRL_NAME	= Framerate(0.001X)
FUNC_NAME	= setFramerate
======CODE_BLOCK_START======
function setFramerate(val)
    val = val / 1000
    local pix_clk_hz = 148500000
    -- line_length 0x301c 0x301d
    local hts = 3300
    local vts =  math.floor(pix_clk_hz/(hts*val))
    -- vts 0x3018 0x3019 0x301A
	writeReg(0x301A, (vts >> 16) & 0x0F)
    writeReg(0x3019, (vts >> 8) & 0xFF)
    writeReg(0x3018, vts & 0xFF)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 1
MAX_VALUE   = 23301666
STEP        = 1
DEF 		= 5311
CTRL_NAME	= Exp(us)
FUNC_NAME	= setExposureTime
======CODE_BLOCK_START======
function setExposureTime(val)
    local hts = 3300
    local pix_clk_hz = 148500000
    local exp = math.floor(val*1000/(hts/pix_clk_hz*1e9))
    
    local ret, vts_L = readReg(0x3018)
    local ret, vts_M = readReg(0x3019)
    local ret, vts_H = readReg(0x301A)
    local vts = (vts_H & 0x0F) << 16 | (vts_M & 0xFF) << 8 | (vts_L & 0xFF)
    if(exp<1)
    then
        exp = 1
    elseif(exp > vts - 2)
    then
        exp = vts - 2;
    end
    local val = vts - 2 + 1 - exp

	writeReg(0x3022, (val >> 16) & 0x0F)
    writeReg(0x3021, (val >> 8) & 0xFF)
    writeReg(0x3020, val & 0xFF)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 100
MAX_VALUE   = 20000
STEP        = 1
DEF 		= 100
CTRL_NAME	= Gain(0.01X)
FUNC_NAME	= setGain
======CODE_BLOCK_START======
function setGain(val)
    local G_times = val / 100
    local G_dB = 20 * math.log10(G_times)
    local G_Analog = math.floor(G_dB * 10 / 3)
	writeReg(0x3014, G_Analog)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 0
MAX_VALUE   = 1
STEP        = 1
DEF 		= 1
CTRL_NAME	= HCG
FUNC_NAME	= setHCG
======CODE_BLOCK_START======
function setHCG(val)
    local HCG = readReg(0x3009)
    HCG = (HCG & 0xE0) | (val << 4) | (HCG & 0x0F)
	writeReg(0x3009, HCG)
end
======CODE_BLOCK_END======

;**************************************************************************************/
; ----- board parameter -----
;
; -- Keyname description:
; VRCMD = set board parameter by vendor command 
; 
; -- Keyname format:
; VRCMD = <command>, <value>, <index>, <dataNumber>[, <data1>[, <data2>[, <data3>[, <data4>]]]] 		//<comment>
;
; <command>     
; <value>      
; <index>         
; <dataNumber>  
; <dataN>      
; <comment>    Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[board parameter]
VRCMD = 0xD7, 0x4600, 0x0100, 1, 0x05
VRCMD = 0xD7, 0x4600, 0x0200, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0xC0
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x40
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0A00, 1, 0x01
VRCMD = 0xD7, 0x4600, 0x0C00, 1, 0x91
VRCMD = 0xD7, 0x4600, 0x0D00, 1, 0x07
VRCMD = 0xD7, 0x4600, 0x0E00, 1, 0xEC
VRCMD = 0xD7, 0x4600, 0x0F00, 1, 0x05
VRCMD = 0xD7, 0x4600, 0x1000, 1, 0xF0
VRCMD = 0xD7, 0x4600, 0x1100, 1, 0x03
VRCMD = 0xD7, 0x4600, 0x2300, 1, 0x01
VRCMD = 0xD7, 0x4600, 0x2900, 1, 0x00

[board parameter][dev2]
VRCMD = 0xF6, 0x0000, 0x0000, 3, 0x03, 0x04, 0x0C

[board parameter][dev3][inf2]
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0

[board parameter][dev3][inf3]
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0


;**************************************************************************************/
; ----- register parameter -----
;
; -- Keyname description:
; REG    = assign a new register value
; DELAY  = delay a certain amount of milliseconds before continuing
; BITSET = do a set operation to part of a register. The part is defined as a mask.
; BITCLR = do a reset operation to part of a register. The part is defined as a mask.
;
; -- Keyname format:
; REG    = [<page>,] <address>, <value>             //<comment>
; DELAY  = <milliseconds>
; BITSET = [<page>,] <address>, <mask>
; BITCLR = [<page>,] <address>, <mask>
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developers guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[register parameter]
REG = 0x3000, 0x01 
DELAY  = 10
REG = 0x3001, 0x00 
REG = 0x3002, 0x00 
REG = 0x3005, 0x01 
REG = 0x3007, 0x10 
REG = 0x3009, 0x11  //HCG
REG = 0x300a, 0xf0 
REG = 0x300b, 0x00 
REG = 0x3011, 0x0a 
REG = 0x3012, 0x64 
REG = 0x3014, 0x00 
REG = 0x3018, 0xEE // vMAX L
REG = 0x3019, 0x02 // VMAX M
REG = 0x301a, 0x00 // VMAX H
REG = 0x301c, 0xE4 // HMAX L
REG = 0x301d, 0x0C // HMAX H 
REG = 0x3020, 0xfe 
REG = 0x3021, 0x01 
REG = 0x3022, 0x00 
REG = 0x3046, 0x01 
REG = 0x3048, 0x00 
REG = 0x3049, 0x08 
REG = 0x304b, 0x0a 
REG = 0x305c, 0x18 
REG = 0x305d, 0x03 
REG = 0x305e, 0x20 
REG = 0x305f, 0x01 
REG = 0x309e, 0x4a 
REG = 0x309f, 0x4a 
REG = 0x30d2, 0x19 //
REG = 0x30d7, 0x03 //
REG = 0x3128, 0x04 
REG = 0x3129, 0x00 
REG = 0x313b, 0x41 
REG = 0x315e, 0x1a //INCKSEL
REG = 0x3164, 0x1a //INCKSEL
REG = 0x317c, 0x00 
REG = 0x31ec, 0x0e 

REG = 0x3405, 0x00 
REG = 0x3407, 0x01 
REG = 0x3414, 0x0a 
REG = 0x3418, 0xD0 
REG = 0x3419, 0x02 
REG = 0x3441, 0x0A 
REG = 0x3442, 0x0A 

REG = 0x3443, 0x01 
REG = 0x3444, 0x20  
REG = 0x3445, 0x25  
REG = 0x3446, 0x67 
REG = 0x3447, 0x00 
REG = 0x3448, 0x57  
REG = 0x3449, 0x00 
REG = 0x344a, 0x2F 
REG = 0x344b, 0x00 
REG = 0x344c, 0x27 
REG = 0x344d, 0x00 
REG = 0x344e, 0x3f 
REG = 0x344f, 0x00 
REG = 0x3450, 0xBf 
REG = 0x3451, 0x00 
REG = 0x3452, 0x2f 
REG = 0x3453, 0x00 
REG = 0x3454, 0x27 
REG = 0x3455, 0x00 
REG = 0x3472, 0x00 
REG = 0x3473, 0x05 
REG = 0x3480, 0x49 
DELAY = 10
REG = 0x3000, 0x00

